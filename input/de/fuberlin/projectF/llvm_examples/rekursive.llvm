; ModuleID = 'rekursive.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [14 x i8] c"ergebnis: %d\0A\00"

define i32 @main() nounwind {
  %1 = alloca i32, align 4
  %a = alloca i32, align 4
  %erg = alloca i32, align 4
  store i32 0, i32* %1
  store i32 10, i32* %a, align 4
  %2 = load i32* %a, align 4
  %3 = call i32 @rekursive(i32 %2)
  store i32 %3, i32* %erg, align 4
  %4 = load i32* %erg, align 4
  %5 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str, i32 0, i32 0), i32 %4)
  ret i32 0
}

define i32 @rekursive(i32 %a) nounwind {
  %1 = alloca i32, align 4
  store i32 %a, i32* %1, align 4
  %2 = load i32* %1, align 4
  %3 = icmp sgt i32 %2, 0
  br i1 %3, label %4, label %9

; <label>:4                                       ; preds = %0
  %5 = load i32* %1, align 4
  %6 = add nsw i32 %5, -1
  store i32 %6, i32* %1, align 4
  %7 = load i32* %1, align 4
  %8 = call i32 @rekursive(i32 %7)
  store i32 %8, i32* %1, align 4
  br label %9

; <label>:9                                       ; preds = %4, %0
  %10 = load i32* %1, align 4
  ret i32 %10
}

declare i32 @printf(i8*, ...)
