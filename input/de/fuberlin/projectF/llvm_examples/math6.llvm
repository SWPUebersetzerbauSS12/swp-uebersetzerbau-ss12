; ModuleID = 'math6.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-pc-linux-gnu"

define i32 @main() nounwind {
  %1 = alloca i32, align 4
  %op1 = alloca i32, align 4
  %op2 = alloca i32, align 4
  %opArray = alloca [2 x i32], align 4
  %op1Double = alloca double, align 8
  %op2Double = alloca double, align 8
  %summe = alloca i32, align 4
  %summeDouble = alloca double, align 8
  %differenz = alloca i32, align 4
  store i32 0, i32* %1
  store i32 10, i32* %op1, align 4
  store i32 5, i32* %op2, align 4
  store double 3.400000e+00, double* %op1Double, align 8
  store double 2.900000e+00, double* %op2Double, align 8
  %2 = load i32* %op1, align 4
  %3 = load i32* %op2, align 4
  %4 = call i32 @addition(i32 %2, i32 %3)
  store i32 %4, i32* %summe, align 4
  %5 = load i32* %op1, align 4
  %6 = getelementptr inbounds [2 x i32]* %opArray, i32 0, i64 0
  store i32 %5, i32* %6
  %7 = load i32* %op2, align 4
  %8 = getelementptr inbounds [2 x i32]* %opArray, i32 0, i64 1
  store i32 %7, i32* %8
  %9 = getelementptr inbounds [2 x i32]* %opArray, i32 0, i32 0
  %10 = call i32 @additionArray(i32* %9)
  store i32 %10, i32* %summe, align 4
  %11 = load double* %op1Double, align 8
  %12 = fptosi double %11 to i32
  %13 = load double* %op2Double, align 8
  %14 = fptosi double %13 to i32
  %15 = call i32 @addition(i32 %12, i32 %14)
  %16 = sitofp i32 %15 to double
  store double %16, double* %summeDouble, align 8
  %17 = load i32* %op1, align 4
  %18 = load i32* %op2, align 4
  %19 = call i32 @subtraktion(i32 %17, i32 %18)
  store i32 %19, i32* %differenz, align 4
  call void @sinnlos()
  ret i32 0
}

define i32 @addition(i32 %summand1, i32 %summand2) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %summand1, i32* %1, align 4
  store i32 %summand2, i32* %2, align 4
  %3 = load i32* %1, align 4
  %4 = load i32* %2, align 4
  %5 = add nsw i32 %3, %4
  ret i32 %5
}

define i32 @additionArray(i32* %opArray) nounwind {
  %1 = alloca i32*, align 8
  store i32* %opArray, i32** %1, align 8
  %2 = load i32** %1, align 8
  %3 = getelementptr inbounds i32* %2, i64 0
  %4 = load i32* %3
  %5 = load i32** %1, align 8
  %6 = getelementptr inbounds i32* %5, i64 1
  %7 = load i32* %6
  %8 = add nsw i32 %4, %7
  ret i32 %8
}

define i32 @subtraktion(i32 %minuend, i32 %subtrahent) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %minuend, i32* %1, align 4
  store i32 %subtrahent, i32* %2, align 4
  %3 = load i32* %1, align 4
  %4 = load i32* %2, align 4
  %5 = sub nsw i32 %3, %4
  ret i32 %5
}

define double @additionDouble(double %summand1, double %summand2) nounwind {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  store double %summand1, double* %1, align 8
  store double %summand2, double* %2, align 8
  %3 = load double* %1, align 8
  %4 = load double* %2, align 8
  %5 = fadd double %3, %4
  ret double %5
}

define void @sinnlos() nounwind {
  ret void
}
