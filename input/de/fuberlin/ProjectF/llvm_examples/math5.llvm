; ModuleID = 'math5.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [14 x i8] c"%d + %d = %d\0A\00"
@.str1 = private unnamed_addr constant [14 x i8] c"%f + %f = %f\0A\00"

define i32 @main() nounwind {
  %1 = alloca i32, align 4
  %op1 = alloca i32, align 4
  %op2 = alloca i32, align 4
  %op1Double = alloca double, align 8
  %op2Double = alloca double, align 8
  %summe = alloca i32, align 4
  %summeDouble = alloca double, align 8
  %differenz = alloca i32, align 4
  store i32 0, i32* %1
  store i32 10, i32* %op1, align 4
  store i32 5, i32* %op2, align 4
  store double 3.400000e+00, double* %op1Double, align 8
  store double 2.900000e+00, double* %op2Double, align 8
  %2 = load i32* %op1, align 4
  %3 = load i32* %op2, align 4
  %4 = call i32 @addition(i32 %2, i32 %3)
  store i32 %4, i32* %summe, align 4
  %5 = load i32* %op1, align 4
  %6 = load i32* %op2, align 4
  %7 = load i32* %summe, align 4
  %8 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str, i32 0, i32 0), i32 %5, i32 %6, i32 %7)
  %9 = load double* %op1Double, align 8
  %10 = load double* %op2Double, align 8
  %11 = fadd double %9, %10
  store double %11, double* %summeDouble, align 8
  %12 = load double* %op1Double, align 8
  %13 = load double* %op2Double, align 8
  %14 = load double* %summeDouble, align 8
  %15 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0), double %12, double %13, double %14)
  %16 = load double* %op1Double, align 8
  %17 = load double* %op2Double, align 8
  %18 = call double @additionDouble(double %16, double %17)
  store double %18, double* %summeDouble, align 8
  %19 = load double* %op1Double, align 8
  %20 = load double* %op2Double, align 8
  %21 = load double* %summeDouble, align 8
  %22 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0), double %19, double %20, double %21)
  %23 = load i32* %op1, align 4
  %24 = load i32* %op2, align 4
  %25 = call i32 @subtraktion(i32 %23, i32 %24)
  store i32 %25, i32* %differenz, align 4
  %26 = load i32* %op1, align 4
  %27 = load i32* %op2, align 4
  %28 = load i32* %differenz, align 4
  %29 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str, i32 0, i32 0), i32 %26, i32 %27, i32 %28)
  call void @sinnlos()
  ret i32 0
}

define i32 @addition(i32 %summand1, i32 %summand2) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %summand1, i32* %1, align 4
  store i32 %summand2, i32* %2, align 4
  %3 = load i32* %1, align 4
  %4 = load i32* %2, align 4
  %5 = add nsw i32 %3, %4
  ret i32 %5
}

declare i32 @printf(i8*, ...)

define double @additionDouble(double %summand1, double %summand2) nounwind {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  store double %summand1, double* %1, align 8
  store double %summand2, double* %2, align 8
  %3 = load double* %1, align 8
  %4 = load double* %2, align 8
  %5 = fadd double %3, %4
  ret double %5
}

define i32 @subtraktion(i32 %minuend, i32 %subtrahent) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %minuend, i32* %1, align 4
  store i32 %subtrahent, i32* %2, align 4
  %3 = load i32* %1, align 4
  %4 = load i32* %2, align 4
  %5 = sub nsw i32 %3, %4
  ret i32 %5
}

define void @sinnlos() nounwind {
  ret void
}
