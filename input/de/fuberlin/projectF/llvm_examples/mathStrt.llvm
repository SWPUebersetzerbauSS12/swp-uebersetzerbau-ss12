; ModuleID = 'mathStruct.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-pc-linux-gnu"

%struct.container = type { i32, i32, i32 }

@.str = private unnamed_addr constant [11 x i8] c"Summe: %d\0A\00"

define i32 @main() nounwind {
  %1 = alloca i32, align 4
  %cont = alloca %struct.container, align 4
  store i32 0, i32* %1
  %2 = getelementptr inbounds %struct.container* %cont, i32 0, i32 0
  store i32 5, i32* %2, align 4
  %3 = getelementptr inbounds %struct.container* %cont, i32 0, i32 1
  store i32 7, i32* %3, align 4
  %4 = getelementptr inbounds %struct.container* %cont, i32 0, i32 0
  %5 = load i32* %4, align 4
  %6 = getelementptr inbounds %struct.container* %cont, i32 0, i32 1
  %7 = load i32* %6, align 4
  %8 = add nsw i32 %5, %7
  %9 = getelementptr inbounds %struct.container* %cont, i32 0, i32 2
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds %struct.container* %cont, i32 0, i32 2
  %11 = load i32* %10, align 4
  %12 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str, i32 0, i32 0), i32 %11)
  ret i32 0
}

declare i32 @printf(i8*, ...)
