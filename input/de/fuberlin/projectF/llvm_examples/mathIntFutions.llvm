; ModuleID = 'mathIntFunctions.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [14 x i8] c"%d + %d = %d\0A\00"
@.str1 = private unnamed_addr constant [14 x i8] c"%d - %d = %d\0A\00"
@.str2 = private unnamed_addr constant [14 x i8] c"%d * %d = %d\0A\00"
@.str3 = private unnamed_addr constant [14 x i8] c"%d / %d = %d\0A\00"

define i32 @main() nounwind {
  %1 = alloca i32, align 4
  %op1 = alloca i32, align 4
  %op2 = alloca i32, align 4
  %erg = alloca i32, align 4
  store i32 0, i32* %1
  store i32 10, i32* %op1, align 4
  store i32 5, i32* %op2, align 4
  %2 = load i32* %op1, align 4
  %3 = load i32* %op2, align 4
  %4 = call i32 @addition(i32 %2, i32 %3)
  store i32 %4, i32* %erg, align 4
  %5 = load i32* %op1, align 4
  %6 = load i32* %op2, align 4
  %7 = load i32* %erg, align 4
  %8 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str, i32 0, i32 0), i32 %5, i32 %6, i32 %7)
  %9 = load i32* %op1, align 4
  %10 = load i32* %op2, align 4
  %11 = call i32 @subtraktion(i32 %9, i32 %10)
  store i32 %11, i32* %erg, align 4
  %12 = load i32* %op1, align 4
  %13 = load i32* %op2, align 4
  %14 = load i32* %erg, align 4
  %15 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0), i32 %12, i32 %13, i32 %14)
  %16 = load i32* %op1, align 4
  %17 = load i32* %op2, align 4
  %18 = call i32 @multiplikation(i32 %16, i32 %17)
  store i32 %18, i32* %erg, align 4
  %19 = load i32* %op1, align 4
  %20 = load i32* %op2, align 4
  %21 = load i32* %erg, align 4
  %22 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0), i32 %19, i32 %20, i32 %21)
  %23 = load i32* %op1, align 4
  %24 = load i32* %op2, align 4
  %25 = call i32 @division(i32 %23, i32 %24)
  store i32 %25, i32* %erg, align 4
  %26 = load i32* %op1, align 4
  %27 = load i32* %op2, align 4
  %28 = load i32* %erg, align 4
  %29 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str3, i32 0, i32 0), i32 %26, i32 %27, i32 %28)
  call void @sinnlos()
  ret i32 0
}

define i32 @addition(i32 %summand1, i32 %summand2) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %summand1, i32* %1, align 4
  store i32 %summand2, i32* %2, align 4
  %3 = load i32* %1, align 4
  %4 = load i32* %2, align 4
  %5 = add nsw i32 %3, %4
  ret i32 %5
}

declare i32 @printf(i8*, ...)

define i32 @subtraktion(i32 %minuend, i32 %subtrahent) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %minuend, i32* %1, align 4
  store i32 %subtrahent, i32* %2, align 4
  %3 = load i32* %1, align 4
  %4 = load i32* %2, align 4
  %5 = sub nsw i32 %3, %4
  ret i32 %5
}

define i32 @multiplikation(i32 %summand1, i32 %summand2) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %summand1, i32* %1, align 4
  store i32 %summand2, i32* %2, align 4
  %3 = load i32* %1, align 4
  %4 = load i32* %2, align 4
  %5 = mul nsw i32 %3, %4
  ret i32 %5
}

define i32 @division(i32 %minuend, i32 %subtrahent) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %minuend, i32* %1, align 4
  store i32 %subtrahent, i32* %2, align 4
  %3 = load i32* %1, align 4
  %4 = load i32* %2, align 4
  %5 = sdiv i32 %3, %4
  ret i32 %5
}

define void @sinnlos() nounwind {
  ret void
}
